#!/usr/bin/env bash

# Copyright 01.01.2022 - 30.03.2022 Nicolai Brand
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

HELP="
-r,     prints total hours spent using tomatoshell and exits
-t,     time for every session in minutes [default:60 minutes]
-d,     delay between sessions in minutes [default:10 minutes]
-n,     total sessions [default:1]
-f,     figlet on
-p,     pause key to use during countdown [default:none]
-h,     shows this"

# defaults
TIME=60
DELAY=10
SESSIONS=1

FIGLET=false
ALARM="$HOME/tomatoshell/etc/alarm.wav"
MUSIC="$HOME/Dropbox/My Hero Academia OST - You Say Run + Jet Set Run (You Say Run v2).mp3"
START_TIME_MUSIC=0 # 124 or 0
TIME_PLAY_MUSIC=20   # p for kill music
LOG="$HOME/tomatoshell/tomatoshell_log.csv"
AUDIO_PLAYER=3
PAUSE_KEY='p'

# colors
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
CYAN="\033[0;34m"
FIN="\033[0m"

write_to_log() {
    date_f=$(date +"%Y-%m-%d")
    echo "$date_f,$SESSIONS,$TIME" >> "$LOG"
}

total_hours_used() {
    printf "$YELLOW Total time spent focused: $FIN"
    awk -F ',' '{sum+=$2 * $3;} END{hours=int(sum/3600); minutes=int((sum%3600)/60); seconds=int(sum%60); printf "%dh:%dm:%ds", hours, minutes, seconds;}' $LOG
    printf " 🍅🤓\n"
}

find_sound_system() {
    if command -v mplayer &> /dev/null; then
        AUDIO_PLAYER=mplayer
    elif command -v paplay &> /dev/null; then
        AUDIO_PLAYER=paplay
    elif command -v pw-play &> /dev/null; then
        AUDIO_PLAYER=pw-play
    elif command -v aplay &> /dev/null; then
        AUDIO_PLAYER=aplay
    else
        AUDIO_PLAYER=0
    fi
}

play_alarm() {
    printf "Press 's' to stop alarm"
    [ $1 -eq -1 ] && echo " and start next session" || echo ""

    process_name="tomatoshell_alarm"

    while :; do
        if ! [ -e /proc/"$(pidof "$process_name")"/status ]; then
            bash -c "exec -a $process_name $AUDIO_PLAYER $ALARM &>/dev/null" &
        else
            read -t 0.01 -r -s -n 1
            [[ $REPLY == 's' ]] && pkill -f "$process_name" && break
        fi
    done
}

play_music() {
    process_name="tomatoshell_music"

    if ! [ -e /proc/"$(pidof "$process_name")"/status ]; then
        bash -c "exec -a $process_name $AUDIO_PLAYER -ss $START_TIME_MUSIC -endpos $TIME_PLAY_MUSIC '$MUSIC' &>/dev/null" &
    fi
}

display_centered_figlet() {
    text="$1"
    cols=$(tput cols)
    while IFS= read -r line; do
        line_length=${#line}
        padding=$(( (cols - line_length) / 2 ))
        printf "%*s%s\n" $padding "" "$line"
    done < <(figlet -f slant "$text")
}

display_countdown() {
    start=$1
    session_number=$2
    print_offset=10

    while [ "$start" -ge "$(date +%s)" ]; do
        remaining=$(date -u --date @$((start - $(date +%s))) +%M:%S)

        clear

        lines=$(tput lines)
        cols=$(tput cols)
        vertical_padding=$((lines / 2 - 6))

        for ((i=0; i<vertical_padding; i++)); do echo ""; done

        if $FIGLET; then
            if [[ $session_number -ne -1 ]]; then
                display_centered_figlet "STAY HARD"
                session_str="Session $session_number/$SESSIONS"
                padding=$(( (cols + ${#session_str}) / 2 ))
                printf "%*s\n" $padding "$session_str"
            else
                display_centered_figlet "BREAK TIME"
            fi
            echo "$remaining" | figlet | while IFS= read -r line; do
                padding=$(( (cols - ${#line}) / 2 ))
                printf "%*s%s\n" "$padding" "" "$line"
            done
        else
            msg="🍅Time left of session $session_number/$SESSIONS:🍅"
            [ $session_number -eq -1 ] && msg="🍅Time left of break:🍅"
            printf "%*s\n" $(((${#msg}+$cols+print_offset)/2)) "$msg"
            printf "%*s\r" $(((${#remaining}+$cols+print_offset)/2)) "$CYAN⏳ $YELLOW $remaining$FIN  🍅"
        fi

        read -t 1 -r -s -N 1 && {
            if [[ $REPLY == 'q' ]]; then
                pkill -f "tomatoshell_music"
                exit_p
            elif [[ $REPLY == 's' ]]; then
                pkill -f "tomatoshell_music"
                break
            elif [[ $REPLY == 'p' ]]; then
                pkill -f "tomatoshell_music"
                echo -e "\n$YELLOW Paused... Press p to resume $FIN"
                local pause_time=$(date +%s)
                while :; do
                    read -r -s -N 1 key
                    if [[ $REPLY == 'p' ]]; then
                        local resume_time=$(date +%s)
                        local paused_duration=$((resume_time - pause_time))
                        start=$((start + paused_duration))
                        echo -e "$GREEN Resuming...$FIN"
                        break
                    fi
                done
            fi
        }
    done
}

countdown() {
    time=$1
    session_number=$2
    start=$(($(date +%s) + $1))
    if [[ $session_number -ne -1 ]]; then
        play_music
    fi
    display_countdown $start $session_number
    clear

    [ $session_number -ne -1 ] && notify-send -t 10000 -u "normal" "Session number $session_number finished"

    if $FIGLET; then
        [ $session_number -ne -1 ] && figlet -c -t "Session $session_number/$SESSIONS finished" || figlet -c -t "Break finished"
    else
        [ $session_number -ne -1 ] && echo -e "$GREEN Session $session_number/$SESSIONS finished$FIN" || echo -e "$GREEN Break finished$FIN"
    fi

    stty echo
    play_alarm "$session_number"
    stty -echo

    return 0
}

exit_p() {
    write_to_log
    tput cnorm
    stty echo
    echo -e "$RED\nexiting$FIN"
    exit $1
}

main() {
    find_sound_system
    trap "exit_p" 2
    stty -echo
    tput civis

    TIME=$(echo "($TIME * 60)/1" | bc)
    DELAY=$(echo "($DELAY * 60)/1" | bc)

    for ((i = 1; i <= $SESSIONS; i++)); do
        clear
        countdown $TIME $i

        [ $i -ne $SESSIONS ] && clear && countdown $DELAY -1
    done
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -r)
            total_hours_used
            exit 0
            ;;
        -t|--time)
            TIME="$2"
            shift && shift
            ;;
        -d|--delay)
            DELAY="$2"
            shift && shift
            ;;
        -n)
            SESSIONS="$2"
            shift && shift
            ;;
        -p)
            PAUSE_KEY="$2"
            shift && shift
            ;;
        -f)
            if command -v figlet &> /dev/null; then
                FIGLET=true
            else
                FIGLET=false
                echo -e "$RED ERROR$FIN: argument '-f' was given, but figlet is not installed"
                echo "Starting without figlet in 3 seconds"
                sleep 3
            fi
            shift
            ;;
        -h|--help)
            echo -e "$HELP"
            exit 0
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

main
exit_p 0

